{"version":3,"file":"index.js","sources":["../src/utils.js","../src/datafield.js"],"sourcesContent":["export function findProp (el, prop) {\r\n  if (el.hasOwnProperty(prop)) return el[prop]\r\n  return traverseKeys(el, prop)\r\n}\r\n\r\nexport function randomTakes (len, num, collection = []) {\r\n  const index = Math.floor(Math.random() * len)\r\n  if (!collection.includes(index)) collection.push(index)\r\n  return collection.length === num ? collection : randomTakes(len, num, collection)\r\n}\r\n\r\nfunction traverseKeys (obj, path, fallback) {\r\n  if (!obj || typeof obj !== 'object') return typeof fallback === 'function' ? fallback() : fallback\r\n  if (!path) return obj\r\n\r\n  let o = Object.assign({}, obj)\r\n  path = path.split('.')\r\n\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (!o.hasOwnProperty(path[i])) return typeof fallback === 'function' ? fallback() : fallback\r\n    o = o[path[i]]\r\n    if (o !== Object(o) && i < path.length - 1) return typeof fallback === 'function' ? fallback() : fallback\r\n  }\r\n\r\n  return o\r\n}\r\n\r\nexport function checkTypes (a, b) {\r\n  if (typeof a !== typeof b) return false\r\n  if (typeof a === 'object' && a instanceof Date && b instanceof Date) return true\r\n  return typeof a === 'number' || typeof a === 'string'\r\n}\r\n","import { findProp, randomTakes, checkTypes } from './utils'\r\n\r\n/// TODO fix array in comparison\r\nexport default class DataField {\r\n  constructor (array = [], selector) {\r\n    if (!Array.isArray(array)) throw new Error('DataField can only accept arrays')\r\n    this.data = array.slice(0) // https://jsperf.com/cloning-arrays/3\r\n    this.caret = 0\r\n    this.selector = selector\r\n  }\r\n\r\n  exists (prop) {\r\n    const data = this.data.filter(el => findProp(el, prop) !== undefined)\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  has (prop) {\r\n    const data = this.data.filter(el => {\r\n      const value = findProp(el, prop)\r\n      return Array.isArray(value) ? value.length : value\r\n    })\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  take (number = 1) {\r\n    const data = new DataField(this.data.slice(this.caret, this.caret + number), this.selector)\r\n    this.caret += number\r\n    return data\r\n  }\r\n\r\n  get length () {\r\n    this.__reset()\r\n    return this.data.length\r\n  }\r\n\r\n  takeRandom (number = 1) {\r\n    if (typeof number !== 'number') number = parseInt(String(number))\r\n    if (isNaN(number)) number = 1\r\n    number = Math.floor(number)\r\n    if (number > this.data.length) number = this.data.length\r\n    const selected = randomTakes(this.data.length, number)\r\n    const data = this.data.filter((el, i) => selected.includes(i))\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  where (selector) {\r\n    this.selector = selector\r\n    return this\r\n  }\r\n\r\n  eq (value) {\r\n    if (!this.selector) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)).getTime() === value.getTime())\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue === value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  not (value) {\r\n    if (!this.selector) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)).getTime() !== value.getTime())\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue !== value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  gt (value) {\r\n    if (!this.selector || value === undefined) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)) > value)\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue > value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  lt (value) {\r\n    if (!this.selector || value === undefined) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)) < value)\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue < value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  gte (value) {\r\n    if (!this.selector || value === undefined) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)) >= value)\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue >= value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  lte (value) {\r\n    if (!this.selector || value === undefined) return this\r\n    let data\r\n    if (value instanceof Date) {\r\n      data = this.data.filter(el => new Date(findProp(el, this.selector)) <= value)\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      let propValue = findProp(el, this.selector)\r\n      if (Array.isArray(propValue)) propValue = propValue.length\r\n      return propValue <= value\r\n    }\r\n    )\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  range (from, to) {\r\n    if (!checkTypes(from, to)) throw new Error('DataField range() method accepts 2 arguments of the same type')\r\n    if (!this.selector) return this\r\n    let data\r\n    if (from instanceof Date) {\r\n      data = this.data.filter(el => {\r\n        const val = findProp(el, this.selector)\r\n        return new Date(val) >= from && new Date(val) < to\r\n      })\r\n      return new DataField(data, this.selector)\r\n    }\r\n    data = this.data.filter(el => {\r\n      const val = findProp(el, this.selector)\r\n      if (Array.isArray(val)) {\r\n        return val.length >= from && val.length < to\r\n      }\r\n      return val >= from && val < to\r\n    })\r\n    return new DataField(data, this.selector)\r\n  }\r\n\r\n  sort ({by, order = 'asc', type} = {}) {\r\n    const prop = this.__findFirstOccurrence(by)\r\n    if (!by || !prop) return this\r\n    if (order !== 'desc') order = 'asc'\r\n    if (!type) type = typeof prop\r\n    this.selector = by\r\n    return order === 'asc' ? this.asc(type) : this.desc(type)\r\n  }\r\n\r\n  asc (type) {\r\n    if (this.selector && this.data.length) {\r\n      let data = []\r\n      type = type || this.__getType()\r\n      const prop = this.selector\r\n      switch (type) {\r\n        case 'n':\r\n        case 'num':\r\n        case 'number':\r\n          data = this.data.slice().sort((a, b) => findProp(a, prop) - findProp(b, prop))\r\n          break\r\n        case 'string':\r\n        case 'str':\r\n        case 's':\r\n          data = this.data.slice().sort((a, b) => String(findProp(a, prop)).localeCompare(String(findProp(b, prop))))\r\n          break\r\n        case 'date':\r\n        case 'd':\r\n          data = this.data.slice().sort((a, b) => Number(new Date(findProp(a, prop))) - Number(new Date(findProp(b, prop))))\r\n          break\r\n        case 'array':\r\n        case 'arr':\r\n          data = this.data.slice().sort((a, b) => {\r\n            const _a = findProp(a, prop)\r\n            const _b = findProp(b, prop)\r\n            if (Array.isArray(_a) && Array.isArray(_b)) {\r\n              return _a.length - _b.length\r\n            }\r\n          })\r\n          break\r\n        default:\r\n          return this\r\n      }\r\n      return new DataField(data, this.selector)\r\n    }\r\n    return this\r\n  }\r\n\r\n  desc (type) {\r\n    if (this.selector && this.data.length) {\r\n      let data = []\r\n      type = type || this.__getType()\r\n      const prop = this.selector\r\n      switch (type) {\r\n        case 'n':\r\n        case 'num':\r\n        case 'number':\r\n          data = this.data.slice().sort((a, b) => findProp(b, prop) - findProp(a, prop))\r\n          break\r\n        case 'string':\r\n        case 'str':\r\n        case 's':\r\n          data = this.data.slice().sort((a, b) => String(findProp(b, prop)).localeCompare(String(findProp(a, prop))))\r\n          break\r\n        case 'date':\r\n        case 'd':\r\n          data = this.data.slice().sort((a, b) => Number(new Date(findProp(b, prop))) - Number(new Date(findProp(a, prop))))\r\n          break\r\n        case 'array':\r\n        case 'arr':\r\n          data = this.data.slice().sort((a, b) => {\r\n            const _a = findProp(a, prop)\r\n            const _b = findProp(b, prop)\r\n            if (Array.isArray(_a) && Array.isArray(_b)) {\r\n              return _b.length - _a.length\r\n            }\r\n          })\r\n          break\r\n        default:\r\n          return this\r\n      }\r\n      return new DataField(data, this.selector)\r\n    }\r\n    return this\r\n  }\r\n\r\n  sum (prop, strict = true) {\r\n    this.__reset()\r\n    return this.data.reduce((sum, el) => {\r\n      const value = findProp(el, prop)\r\n      if (strict) return typeof value === 'number' ? sum + value : sum\r\n      return !isNaN(value) ? sum + Number(value) : sum\r\n    }, 0)\r\n  }\r\n\r\n  avg (prop, strict = true) {\r\n    this.__reset()\r\n    let sum = 0\r\n    let count = 0\r\n    this.data.forEach(el => {\r\n      const value = findProp(el, prop)\r\n      if (strict) {\r\n        if (typeof value === 'number') {\r\n          count++\r\n          sum += value\r\n        }\r\n      } else {\r\n        if (!isNaN(value)) {\r\n          count++\r\n          sum += Number(value)\r\n        }\r\n      }\r\n    })\r\n    return count ? sum / count : 0\r\n  }\r\n\r\n  median (prop, strict = true) {\r\n    this.__reset()\r\n    const values = []\r\n    this.data.forEach(el => {\r\n      const value = findProp(el, prop)\r\n      if (strict) {\r\n        if (typeof value === 'number') {\r\n          values.push(value)\r\n        }\r\n      } else {\r\n        if (!isNaN(value)) {\r\n          values.push(Number(value))\r\n        }\r\n      }\r\n    })\r\n\r\n    if (values.length === 0) {\r\n      return 0\r\n    } else if (values.length === 1) {\r\n      return values[0]\r\n    }\r\n\r\n    values.sort((a, b) => a - b)\r\n    const medianItem = Math.floor(values.length / 2)\r\n    return values.length % 2 ? values[medianItem] : (values[medianItem - 1] + values[medianItem]) / 2\r\n  }\r\n\r\n  values () {\r\n    this.__reset()\r\n    return this.data.slice(0) // https://jsperf.com/cloning-arrays/3\r\n  }\r\n\r\n  toArray () {\r\n    return this.values()\r\n  }\r\n\r\n  __reset () {\r\n    this.selector = ''\r\n  }\r\n\r\n  __getType (selector = this.selector) {\r\n    if (!selector) return\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const prop = findProp(this.data[i], selector)\r\n      if (prop) {\r\n        if (Array.isArray(prop)) return 'array'\r\n        return typeof prop\r\n      }\r\n    }\r\n  }\r\n\r\n  __findFirstOccurrence (selector) {\r\n    if (!selector) return\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const prop = findProp(this.data[i], selector)\r\n      if (prop) {\r\n        return prop\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["findProp","el","prop","hasOwnProperty","obj","path","fallback","let","o","Object","assign","split","i","length","traverseKeys","DataField","array","selector","Array","isArray","Error","this","data","slice","caret","exists","filter","undefined","has","const","value","take","number","prototypeAccessors","__reset","takeRandom","parseInt","String","isNaN","Math","floor","selected","randomTakes","len","num","collection","index","random","includes","push","where","eq","Date","getTime","propValue","not","gt","lt","gte","lte","range","from","to","a","b","val","sort","ref","__findFirstOccurrence","by","order","type","asc","desc","__getType","localeCompare","Number","_a","_b","sum","strict","reduce","avg","count","forEach","median","values","medianItem","toArray"],"mappings":"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"}